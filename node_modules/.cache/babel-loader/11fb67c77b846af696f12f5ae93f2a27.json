{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/skolan/inla\\u0308mining2/uppgift2/src/containers/TheForm.jsx\";\nimport React, { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Input from \"../components/Input\";\nimport SelectInput from \"../components/SelectInput\";\nimport FormKit from \"../data/FormKit\";\nimport UserKit from \"../data/UserKit\";\nimport styled from \"styled-components\";\nimport { StyledButton } from \"../pages/SignUpLogin\"; // when the form is rendered on the page, it is rendered\n//  with up to three props:\n// * type:   matches an array  in FormKit.js, the form will\n//   loop over the array and print out\n//   the corresponding inputs.\n// * customerEdit: if customerEdit is sent with the props,\n//   the form renders the Inputs from formKit.customer\n//   and sets the values of the inputs  to the values from the customerEdit object\n// * submit: when the form is submited, the switch\n//   in handleSubmit() checks the submit prop for the correct destination\n\nconst TheForm = ({\n  type,\n  customerEdit,\n  submit\n}) => {\n  const userKit = new UserKit();\n  const formKit = new FormKit();\n  const history = useHistory();\n  const [submitted, setSubmitted] = useState(false);\n  const [fieldValues, setFieldValues] = useState();\n  const [errorMessage, setErrorMessage] = useState({});\n  const {\n    listUpdate,\n    triggerListUpdate,\n    setLoggedIn\n  } = useContext(UserContext); //  to have controlled inputs, an initial value is set\n  //   by looping over the fields in formKit[type].\n  //  if a field has an option value, the value is set to option nr 1,\n  //  if it does not have an option value, the input will be\n  //  a regular input and it's initial value will be set to \"\"\n\n  useEffect(() => {\n    let form = formKit[type];\n    let initialFieldState = form.reduce((acc, cur) => {\n      return { ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\"\n      };\n    }, {});\n    setFieldValues(initialFieldState);\n  }, [submitted]); // if customerEdit-object exists, the initial field-values are set\n  // directly from that object.\n\n  useEffect(() => {\n    customerEdit && setFieldValues(customerEdit);\n  }, []);\n  console.log(fieldValues);\n\n  const handleChange = (name, value) => {\n    setFieldValues(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (formKit.validate(type, fieldValues, setErrorMessage)) {\n      switch (submit) {\n        case \"Register\":\n          userKit.register(fieldValues);\n          break;\n\n        case \"Login\":\n          userKit.login(fieldValues).then(res => res.json()).then(data => {\n            if (data.nonFieldErrors) {\n              setErrorMessage({\n                serverError: data.nonFieldErrors[0]\n              });\n            }\n\n            if (data.token) {\n              userKit.setSessionToken(data.token);\n              setTriggerListUpdate(!triggerListUpdate);\n              history.push(\"/\");\n              setLoggedIn(true);\n            }\n          });\n          break;\n\n        case \"Add customer\":\n          userKit.addCustomer(fieldValues).then(() => setTriggerListUpdate(!triggerListUpdate));\n          break;\n\n        case \"Edit customer\":\n          userKit.updateCustomer(customerEdit.id, fieldValues).then(() => setTriggerListUpdate(!triggerListUpdate)).then(history.push(\"/\"));\n          break;\n\n        default:\n          console.log(\"default\");\n      }\n\n      setSubmitted(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StyledSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, errorMessage.serverError && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"Unable to login, please check email and password\"), fieldValues && formKit[type].map(field => {\n    if (field.input === \"input\") {\n      return /*#__PURE__*/React.createElement(Input, {\n        key: field.name,\n        required: field.required,\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        type: field.type,\n        error: errorMessage[field.name],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      });\n    }\n\n    if (field.input === \"select\") {\n      return /*#__PURE__*/React.createElement(SelectInput, {\n        key: field.name,\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        options: field.options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      });\n    }\n  }), /*#__PURE__*/React.createElement(SubmitButton, {\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, submit)));\n};\n\nexport default TheForm;\nconst StyledSection = styled.section``;\nconst SubmitButton = styled(StyledButton)`\n  &:hover {\n  }\n`;","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/skolan/inlaÌˆmining2/uppgift2/src/containers/TheForm.jsx"],"names":["React","useContext","useState","useEffect","useHistory","UserContext","Input","SelectInput","FormKit","UserKit","styled","StyledButton","TheForm","type","customerEdit","submit","userKit","formKit","history","submitted","setSubmitted","fieldValues","setFieldValues","errorMessage","setErrorMessage","listUpdate","triggerListUpdate","setLoggedIn","form","initialFieldState","reduce","acc","cur","name","options","console","log","handleChange","value","prevState","handleSubmit","e","preventDefault","validate","register","login","then","res","json","data","nonFieldErrors","serverError","token","setSessionToken","setTriggerListUpdate","push","addCustomer","updateCustomer","id","color","map","field","input","required","StyledSection","section","SubmitButton"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { useEffect } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { UserContext } from \"../UserContext\"\nimport Input from \"../components/Input\"\nimport SelectInput from \"../components/SelectInput\"\nimport FormKit from \"../data/FormKit\"\nimport UserKit from \"../data/UserKit\"\nimport styled from \"styled-components\"\nimport { StyledButton } from \"../pages/SignUpLogin\"\n\n// when the form is rendered on the page, it is rendered\n//  with up to three props:\n// * type:   matches an array  in FormKit.js, the form will\n//   loop over the array and print out\n//   the corresponding inputs.\n// * customerEdit: if customerEdit is sent with the props,\n//   the form renders the Inputs from formKit.customer\n//   and sets the values of the inputs  to the values from the customerEdit object\n// * submit: when the form is submited, the switch\n//   in handleSubmit() checks the submit prop for the correct destination\nconst TheForm = ({ type, customerEdit, submit }) => {\n  const userKit = new UserKit()\n  const formKit = new FormKit()\n  const history = useHistory()\n  const [submitted, setSubmitted] = useState(false)\n  const [fieldValues, setFieldValues] = useState()\n  const [errorMessage, setErrorMessage] = useState({})\n\n  const { listUpdate, triggerListUpdate, setLoggedIn } = useContext(UserContext)\n\n  //  to have controlled inputs, an initial value is set\n  //   by looping over the fields in formKit[type].\n  //  if a field has an option value, the value is set to option nr 1,\n  //  if it does not have an option value, the input will be\n  //  a regular input and it's initial value will be set to \"\"\n  useEffect(() => {\n    let form = formKit[type]\n    let initialFieldState = form.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\",\n      }\n    }, {})\n    setFieldValues(initialFieldState)\n  }, [submitted])\n\n  // if customerEdit-object exists, the initial field-values are set\n  // directly from that object.\n  useEffect(() => {\n    customerEdit && setFieldValues(customerEdit)\n  }, [])\n\n  console.log(fieldValues)\n  const handleChange = (name, value) => {\n    setFieldValues((prevState) => {\n      return {\n        ...prevState,\n        [name]: value,\n      }\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (formKit.validate(type, fieldValues, setErrorMessage)) {\n      switch (submit) {\n        case \"Register\":\n          userKit.register(fieldValues)\n          break\n        case \"Login\":\n          userKit\n            .login(fieldValues)\n            .then((res) => res.json())\n            .then((data) => {\n              if (data.nonFieldErrors) {\n                setErrorMessage({\n                  serverError: data.nonFieldErrors[0],\n                })\n              }\n              if (data.token) {\n                userKit.setSessionToken(data.token)\n                setTriggerListUpdate(!triggerListUpdate)\n                history.push(\"/\")\n                setLoggedIn(true)\n              }\n            })\n          break\n        case \"Add customer\":\n          userKit\n            .addCustomer(fieldValues)\n            .then(() => setTriggerListUpdate(!triggerListUpdate))\n          break\n        case \"Edit customer\":\n          userKit\n            .updateCustomer(customerEdit.id, fieldValues)\n            .then(() => setTriggerListUpdate(!triggerListUpdate))\n            .then(history.push(\"/\"))\n          break\n        default:\n          console.log(\"default\")\n      }\n      setSubmitted(true)\n    }\n  }\n\n  return (\n    <StyledSection>\n      <form>\n        {errorMessage.serverError && (\n          <p style={{ color: \"red\" }}>\n            Unable to login, please check email and password\n          </p>\n        )}\n        {fieldValues &&\n          formKit[type].map((field) => {\n            if (field.input === \"input\") {\n              return (\n                <Input\n                  key={field.name}\n                  required={field.required}\n                  name={field.name}\n                  label={field.name}\n                  value={fieldValues[field.name]}\n                  handleChange={handleChange}\n                  type={field.type}\n                  error={errorMessage[field.name]}\n                ></Input>\n              )\n            }\n            if (field.input === \"select\") {\n              return (\n                <SelectInput\n                  key={field.name}\n                  name={field.name}\n                  label={field.name}\n                  value={fieldValues[field.name]}\n                  handleChange={handleChange}\n                  options={field.options}\n                ></SelectInput>\n              )\n            }\n          })}\n        <SubmitButton onClick={(e) => handleSubmit(e)}>{submit}</SubmitButton>\n      </form>\n    </StyledSection>\n  )\n}\n\nexport default TheForm\n\nconst StyledSection = styled.section``\nconst SubmitButton = styled(StyledButton)`\n  &:hover {\n  }\n`\n"]},"metadata":{},"sourceType":"module"}