{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/skolan/inla\\u0308mining2/uppgift2/src/containers/TheForm.jsx\";\nimport React, { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Input from \"../components/Input\";\nimport SelectInput from \"../components/SelectInput\";\nimport FormKit from \"../data/FormKit\";\nimport UserKit from \"../data/UserKit\";\nimport { updateCustomerList } from \"../utils\";\n\nconst TheForm = ({\n  type,\n  customerEdit\n}) => {\n  const userKit = new UserKit();\n  const formKit = new FormKit();\n  const history = useHistory();\n  const [fieldValues, setFieldValues] = useState();\n  const {\n    setCurrentUser\n  } = useContext(UserContext);\n  const {\n    setCustomerList\n  } = useContext(UserContext); // depending on what type of form is requested\n  // initialFieldValues is set by the values collected from FormKit.js\n\n  useEffect(() => {\n    let form = formKit[type];\n    let initialFieldState = form.reduce((acc, cur) => {\n      return { ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\"\n      };\n    }, {});\n    setFieldValues(initialFieldState);\n  }, []);\n  useEffect(() => {\n    customerEdit && setFieldValues(customerEdit);\n  }, []);\n\n  const handleChange = (name, value) => {\n    setFieldValues(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (customerEdit) {\n      // userKit\n      //   .updateCustomer(customerEdit.id, fieldValues)\n      //   .then(() => updateCustomerList(userKit, setCustomerList))\n      //   .then(history.push(\"/\"))\n      formKit.editCustomer();\n    } else {\n      switch (type) {\n        case \"register\":\n          console.log(\"registers\");\n          userKit.register(fieldValues);\n          break;\n\n        case \"login\":\n          console.log(\"logs in\");\n          userKit.login(fieldValues).then(res => res.json()).then(data => {\n            if (data.token) {\n              setCurrentUser(true);\n              userKit.setSessionToken(data.token);\n              history.push(\"/\");\n            }\n          });\n          break;\n\n        case \"addCustomer\":\n          console.log(\"adds customer\");\n          userKit.addCustomer(fieldValues).then(() => updateCustomerList(userKit, setCustomerList));\n          break;\n\n        default:\n          console.log(\"default\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, fieldValues && formKit[type].map(field => {\n    if (field.type === \"input\") {\n      return /*#__PURE__*/React.createElement(Input, {\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      });\n    }\n\n    if (field.type === \"select\") {\n      return /*#__PURE__*/React.createElement(SelectInput, {\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        options: field.options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      });\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, customerEdit ? \"update\" : type));\n};\n\nexport default TheForm;","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/skolan/inlaÌˆmining2/uppgift2/src/containers/TheForm.jsx"],"names":["React","useContext","useState","useEffect","useHistory","UserContext","Input","SelectInput","FormKit","UserKit","updateCustomerList","TheForm","type","customerEdit","userKit","formKit","history","fieldValues","setFieldValues","setCurrentUser","setCustomerList","form","initialFieldState","reduce","acc","cur","name","options","handleChange","value","prevState","handleSubmit","e","preventDefault","editCustomer","console","log","register","login","then","res","json","data","token","setSessionToken","push","addCustomer","map","field"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { useEffect } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { UserContext } from \"../UserContext\"\nimport Input from \"../components/Input\"\nimport SelectInput from \"../components/SelectInput\"\nimport FormKit from \"../data/FormKit\"\nimport UserKit from \"../data/UserKit\"\nimport { updateCustomerList } from \"../utils\"\n\nconst TheForm = ({ type, customerEdit }) => {\n  const userKit = new UserKit()\n  const formKit = new FormKit()\n  const history = useHistory()\n  const [fieldValues, setFieldValues] = useState()\n\n  const { setCurrentUser } = useContext(UserContext)\n  const { setCustomerList } = useContext(UserContext)\n\n  // depending on what type of form is requested\n  // initialFieldValues is set by the values collected from FormKit.js\n  useEffect(() => {\n    let form = formKit[type]\n    let initialFieldState = form.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\",\n      }\n    }, {})\n    setFieldValues(initialFieldState)\n  }, [])\n\n  useEffect(() => {\n    customerEdit && setFieldValues(customerEdit)\n  }, [])\n\n  const handleChange = (name, value) => {\n    setFieldValues((prevState) => {\n      return {\n        ...prevState,\n        [name]: value,\n      }\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (customerEdit) {\n      // userKit\n      //   .updateCustomer(customerEdit.id, fieldValues)\n      //   .then(() => updateCustomerList(userKit, setCustomerList))\n      //   .then(history.push(\"/\"))\n      formKit.editCustomer()\n    } else {\n      switch (type) {\n        case \"register\":\n          console.log(\"registers\")\n          userKit.register(fieldValues)\n          break\n\n        case \"login\":\n          console.log(\"logs in\")\n          userKit\n            .login(fieldValues)\n            .then((res) => res.json())\n            .then((data) => {\n              if (data.token) {\n                setCurrentUser(true)\n                userKit.setSessionToken(data.token)\n                history.push(\"/\")\n              }\n            })\n          break\n        case \"addCustomer\":\n          console.log(\"adds customer\")\n          userKit\n            .addCustomer(fieldValues)\n            .then(() => updateCustomerList(userKit, setCustomerList))\n          break\n        default:\n          console.log(\"default\")\n      }\n    }\n  }\n\n  return (\n    <form>\n      {fieldValues &&\n        formKit[type].map((field) => {\n          if (field.type === \"input\") {\n            return (\n              <Input\n                name={field.name}\n                label={field.name}\n                value={fieldValues[field.name]}\n                handleChange={handleChange}\n              ></Input>\n            )\n          }\n          if (field.type === \"select\") {\n            return (\n              <SelectInput\n                name={field.name}\n                label={field.name}\n                value={fieldValues[field.name]}\n                handleChange={handleChange}\n                options={field.options}\n              ></SelectInput>\n            )\n          }\n        })}\n      <button onClick={(e) => handleSubmit(e)}>\n        {customerEdit ? \"update\" : type}\n      </button>\n    </form>\n  )\n}\n\nexport default TheForm\n"]},"metadata":{},"sourceType":"module"}