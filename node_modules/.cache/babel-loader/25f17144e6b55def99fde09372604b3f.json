{"ast":null,"code":"export default class {\n  constructor() {\n    this.login = [{\n      name: \"email\",\n      input: \"input\",\n      required: true,\n      type: \"input\"\n    }, {\n      name: \"password\",\n      input: \"input\",\n      required: true,\n      type: \"password\"\n    }];\n    this.register = [{\n      name: \"firstName\",\n      input: \"input\"\n    }, {\n      name: \"lastName\",\n      input: \"input\"\n    }, {\n      name: \"email\",\n      input: \"input\"\n    }, {\n      name: \"password\",\n      input: \"input\"\n    }, {\n      name: \"organisationName\",\n      input: \"input\"\n    }, {\n      name: \"organisationKind\",\n      input: \"select\",\n      options: [1, 2, 3]\n    }];\n    this.customer = [{\n      name: \"name\",\n      input: \"input\"\n    }, {\n      name: \"organisationNr\",\n      input: \"input\"\n    }, {\n      name: \"vatNr\",\n      input: \"input\"\n    }, {\n      name: \"reference\",\n      input: \"input\"\n    }, {\n      name: \"paymentTerm\",\n      input: \"input\"\n    }, {\n      name: \"website\",\n      input: \"input\"\n    }, {\n      name: \"email\",\n      input: \"input\"\n    }, {\n      name: \"phoneNumber\",\n      input: \"input\"\n    }];\n  }\n\n} // import React, { useContext, useState } from \"react\"\n// import { useEffect } from \"react\"\n// import { useHistory } from \"react-router-dom\"\n// import { UserContext } from \"../UserContext\"\n// import Input from \"../components/Input\"\n// import SelectInput from \"../components/SelectInput\"\n// import FormKit from \"../data/FormKit\"\n// import UserKit from \"../data/UserKit\"\n// import styled from \"styled-components\"\n// import { StyledButton } from \"../pages/SignUpLogin\"\n// // when the form is rendered on the page, it is rendered\n// //  with up to three props:\n// // * type,   matches an array i FormKit.js, the form will\n// //   loop over the array and print out\n// //   the corresponding inputs.\n// // * customerEdit, if customerEdit is sent with the props,\n// //   the form renders the Inputs from formKit.customer\n// //   and sets the values of the inputs  to the values from the customerEdit object\n// // * submit, when the form is submited, the switch\n// //   in handleSubmit() checks the submit prop for the correct destination\n// const TheForm = ({ type, customerEdit, submit }) => {\n//   const userKit = new UserKit()\n//   const formKit = new FormKit()\n//   const history = useHistory()\n//   const [submitted, setSubmitted] = useState(false)\n//   const [fieldValues, setFieldValues] = useState()\n//   const [errorMessage, setErrorMessage] = useState({})\n//   const { triggerListUpdate, setTriggerListUpdate, setLoggedIn } = useContext(\n//     UserContext\n//   )\n//   //  to have controlled inputs, an initial value is set\n//   //   by looping over the fields in formKit[type].\n//   //  if a field has an option value, the value is set to option nr 1,\n//   //  if it does not have an option value, the input will be\n//   //  a regular input and it's initial value will be set to \"\"\n//   useEffect(() => {\n//     let form = formKit[type]\n//     let initialFieldState = form.reduce((acc, cur) => {\n//       return {\n//         ...acc,\n//         [cur.name]: cur.options ? cur.options[0] : \"\",\n//       }\n//     }, {})\n//     setFieldValues(initialFieldState)\n//   }, [submitted])\n//   // if customerEdit-object exists, the initial field-values are set directly from that object.\n//   useEffect(() => {\n//     customerEdit && setFieldValues(customerEdit)\n//   }, [])\n//   const handleChange = (name, value) => {\n//     setFieldValues((prevState) => {\n//       return {\n//         ...prevState,\n//         [name]: value,\n//       }\n//     })\n//   }\n//   const validate = (fieldValues) => {\n//     const form = formKit[type]\n//     form.forEach((field) => {\n//       if (field.required && fieldValues[field.name].length === 0) {\n//         setErrorMessage((prevState) => {\n//           return {\n//             ...prevState,\n//             [field.name]: \"this field is required\",\n//           }\n//         })\n//         return false\n//       } else {\n//         return true\n//       }\n//     })\n//   }\n//   const handleSubmit = (e) => {\n//     console.log(\"form validated\")\n//     setSubmitted(true)\n//     switch (submit) {\n//       case \"Register\":\n//         userKit.register(fieldValues)\n//         break\n//       case \"Login\":\n//         userKit\n//           .login(fieldValues)\n//           .then((res) => res.json())\n//           .then((data) => {\n//             if (data.token) {\n//               userKit.setSessionToken(data.token)\n//               setTriggerListUpdate(!triggerListUpdate)\n//               history.push(\"/\")\n//               setLoggedIn(true)\n//             }\n//           })\n//         break\n//       case \"Add customer\":\n//         userKit\n//           .addCustomer(fieldValues)\n//           .then(() => setTriggerListUpdate(!triggerListUpdate))\n//         break\n//       case \"Edit customer\":\n//         userKit\n//           .updateCustomer(customerEdit.id, fieldValues)\n//           .then(() => setTriggerListUpdate(!triggerListUpdate))\n//           .then(history.push(\"/\"))\n//         break\n//       default:\n//         console.log(\"default\")\n//     }\n//   }\n//   return (\n//     <StyledSection>\n//       <form>\n//         {fieldValues &&\n//           formKit[type].map((field) => {\n//             if (field.input === \"input\") {\n//               return (\n//                 <Input\n//                   required={field.required}\n//                   name={field.name}\n//                   label={field.name}\n//                   value={fieldValues[field.name]}\n//                   handleChange={handleChange}\n//                   type={field.type}\n//                   error={errorMessage[field.name]}\n//                 ></Input>\n//               )\n//             }\n//             if (field.input === \"select\") {\n//               return (\n//                 <SelectInput\n//                   name={field.name}\n//                   label={field.name}\n//                   value={fieldValues[field.name]}\n//                   handleChange={handleChange}\n//                   options={field.options}\n//                 ></SelectInput>\n//               )\n//             }\n//           })}\n//         <SubmitButton onClick={(e) => handleSubmit(e)}>{submit}</SubmitButton>\n//       </form>\n//     </StyledSection>\n//   )\n// }\n// export default TheForm\n// const StyledSection = styled.section``\n// const SubmitButton = styled(StyledButton)`\n//   &:hover {\n//   }\n// `","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/skolan/inlaÌˆmining2/uppgift2/src/data/FormKit.js"],"names":["login","name","input","required","type","register","options","customer"],"mappings":"AAAA,eAAe,MAAM;AAAA;AAAA,SACnBA,KADmB,GACX,CACN;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAE,OAAxB;AAAiCC,MAAAA,QAAQ,EAAE,IAA3C;AAAiDC,MAAAA,IAAI,EAAE;AAAvD,KADM,EAEN;AAAEH,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,KAAK,EAAE,OAA3B;AAAoCC,MAAAA,QAAQ,EAAE,IAA9C;AAAoDC,MAAAA,IAAI,EAAE;AAA1D,KAFM,CADW;AAAA,SAMnBC,QANmB,GAMR,CACT;AAAEJ,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KADS,EAET;AAAED,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAFS,EAGT;AAAED,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAHS,EAIT;AAAED,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAJS,EAKT;AAAED,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,KAAK,EAAE;AAAnC,KALS,EAMT;AAAED,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,KAAK,EAAE,QAAnC;AAA6CI,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAtD,KANS,CANQ;AAAA,SAenBC,QAfmB,GAeR,CACT;AAAEN,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE;AAAvB,KADS,EAET;AAAED,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,KAAK,EAAE;AAAjC,KAFS,EAGT;AAAED,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAHS,EAIT;AAAED,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KAJS,EAKT;AAAED,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KALS,EAMT;AAAED,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KANS,EAOT;AAAED,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAPS,EAQT;AAAED,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KARS,CAfQ;AAAA;;AAAA,C,CA2BrsourcesContent":["export default class {\n  login = [\n    { name: \"email\", input: \"input\", required: true, type: \"input\" },\n    { name: \"password\", input: \"input\", required: true, type: \"password\" },\n  ]\n\n  register = [\n    { name: \"firstName\", input: \"input\" },\n    { name: \"lastName\", input: \"input\" },\n    { name: \"email\", input: \"input\" },\n    { name: \"password\", input: \"input\" },\n    { name: \"organisationName\", input: \"input\" },\n    { name: \"organisationKind\", input: \"select\", options: [1, 2, 3] },\n  ]\n\n  customer = [\n    { name: \"name\", input: \"input\" },\n    { name: \"organisationNr\", input: \"input\" },\n    { name: \"vatNr\", input: \"input\" },\n    { name: \"reference\", input: \"input\" },\n    { name: \"paymentTerm\", input: \"input\" },\n    { name: \"website\", input: \"input\" },\n    { name: \"email\", input: \"input\" },\n    { name: \"phoneNumber\", input: \"input\" },\n  ]\n}\n\n// import React, { useContext, useState } from \"react\"\n// import { useEffect } from \"react\"\n// import { useHistory } from \"react-router-dom\"\n// import { UserContext } from \"../UserContext\"\n// import Input from \"../components/Input\"\n// import SelectInput from \"../components/SelectInput\"\n// import FormKit from \"../data/FormKit\"\n// import UserKit from \"../data/UserKit\"\n// import styled from \"styled-components\"\n// import { StyledButton } from \"../pages/SignUpLogin\"\n\n// // when the form is rendered on the page, it is rendered\n// //  with up to three props:\n// // * type,   matches an array i FormKit.js, the form will\n// //   loop over the array and print out\n// //   the corresponding inputs.\n// // * customerEdit, if customerEdit is sent with the props,\n// //   the form renders the Inputs from formKit.customer\n// //   and sets the values of the inputs  to the values from the customerEdit object\n// // * submit, when the form is submited, the switch\n// //   in handleSubmit() checks the submit prop for the correct destination\n// const TheForm = ({ type, customerEdit, submit }) => {\n//   const userKit = new UserKit()\n//   const formKit = new FormKit()\n//   const history = useHistory()\n//   const [submitted, setSubmitted] = useState(false)\n//   const [fieldValues, setFieldValues] = useState()\n//   const [errorMessage, setErrorMessage] = useState({})\n\n//   const { triggerListUpdate, setTriggerListUpdate, setLoggedIn } = useContext(\n//     UserContext\n//   )\n\n//   //  to have controlled inputs, an initial value is set\n//   //   by looping over the fields in formKit[type].\n//   //  if a field has an option value, the value is set to option nr 1,\n//   //  if it does not have an option value, the input will be\n//   //  a regular input and it's initial value will be set to \"\"\n//   useEffect(() => {\n//     let form = formKit[type]\n//     let initialFieldState = form.reduce((acc, cur) => {\n//       return {\n//         ...acc,\n//         [cur.name]: cur.options ? cur.options[0] : \"\",\n//       }\n//     }, {})\n//     setFieldValues(initialFieldState)\n//   }, [submitted])\n\n//   // if customerEdit-object exists, the initial field-values are set directly from that object.\n//   useEffect(() => {\n//     customerEdit && setFieldValues(customerEdit)\n//   }, [])\n\n//   const handleChange = (name, value) => {\n//     setFieldValues((prevState) => {\n//       return {\n//         ...prevState,\n//         [name]: value,\n//       }\n//     })\n//   }\n//   const validate = (fieldValues) => {\n//     const form = formKit[type]\n//     form.forEach((field) => {\n//       if (field.required && fieldValues[field.name].length === 0) {\n//         setErrorMessage((prevState) => {\n//           return {\n//             ...prevState,\n//             [field.name]: \"this field is required\",\n//           }\n//         })\n//         return false\n//       } else {\n//         return true\n//       }\n//     })\n//   }\n\n//   const handleSubmit = (e) => {\n//     console.log(\"form validated\")\n//     setSubmitted(true)\n//     switch (submit) {\n//       case \"Register\":\n//         userKit.register(fieldValues)\n//         break\n//       case \"Login\":\n//         userKit\n//           .login(fieldValues)\n//           .then((res) => res.json())\n//           .then((data) => {\n//             if (data.token) {\n//               userKit.setSessionToken(data.token)\n//               setTriggerListUpdate(!triggerListUpdate)\n//               history.push(\"/\")\n//               setLoggedIn(true)\n//             }\n//           })\n\n//         break\n//       case \"Add customer\":\n//         userKit\n//           .addCustomer(fieldValues)\n//           .then(() => setTriggerListUpdate(!triggerListUpdate))\n\n//         break\n//       case \"Edit customer\":\n//         userKit\n//           .updateCustomer(customerEdit.id, fieldValues)\n//           .then(() => setTriggerListUpdate(!triggerListUpdate))\n//           .then(history.push(\"/\"))\n\n//         break\n//       default:\n//         console.log(\"default\")\n//     }\n//   }\n\n//   return (\n//     <StyledSection>\n//       <form>\n//         {fieldValues &&\n//           formKit[type].map((field) => {\n//             if (field.input === \"input\") {\n//               return (\n//                 <Input\n//                   required={field.required}\n//                   name={field.name}\n//                   label={field.name}\n//                   value={fieldValues[field.name]}\n//                   handleChange={handleChange}\n//                   type={field.type}\n//                   error={errorMessage[field.name]}\n//                 ></Input>\n//               )\n//             }\n//             if (field.input === \"select\") {\n//               return (\n//                 <SelectInput\n//                   name={field.name}\n//                   label={field.name}\n//                   value={fieldValues[field.name]}\n//                   handleChange={handleChange}\n//                   options={field.options}\n//                 ></SelectInput>\n//               )\n//             }\n//           })}\n//         <SubmitButton onClick={(e) => handleSubmit(e)}>{submit}</SubmitButton>\n//       </form>\n//     </StyledSection>\n//   )\n// }\n\n// export default TheForm\n\n// const StyledSection = styled.section``\n// const SubmitButton = styled(StyledButton)`\n//   &:hover {\n//   }\n// `\n"]},"metadata":{},"sourceType":"module"}