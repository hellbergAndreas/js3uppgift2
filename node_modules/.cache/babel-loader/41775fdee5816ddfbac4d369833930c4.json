{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/skolan/inla\\u0308mining2/uppgift2/src/containers/TheForm.jsx\";\nimport React, { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Input from \"../components/Input\";\nimport SelectInput from \"../components/SelectInput\";\nimport FormKit from \"../data/FormKit\";\nimport UserKit from \"../data/UserKit\"; // when the form is rendered on the page, it is rendered\n//  with up to three props:\n// * type,   matches an array i FormKit.js, the form will\n//   loop over the array and print out\n//   the corresponding inputs.\n// * customerEdit, if customerEdit is sent with the props,\n//   the form renders the Inputs from formKit.customer\n//   and sets the values of the inputs  the values from the customerEdit object\n// * submit, when the form is submited, the switch\n//   in handleSubmit() checks the submit prop for the correct destination\n\nconst TheForm = ({\n  type,\n  customerEdit,\n  submit\n}) => {\n  const userKit = new UserKit();\n  const formKit = new FormKit();\n  const history = useHistory();\n  const [fieldValues, setFieldValues] = useState();\n  const {\n    triggerListUpdate,\n    setTriggerListUpdate\n  } = useContext(UserContext); //  to have controlled inputs, an initial value is set\n  //   by looping over the fields in formKit[type].\n  //  if a field has an option value, the value is set to option nr 1,\n  //  if it does not have an option value, the input will be\n  //  a regular input and it's initial value will be set to \"\"\n\n  useEffect(() => {\n    let form = formKit[type];\n    let initialFieldState = form.reduce((acc, cur) => {\n      return { ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\"\n      };\n    }, {});\n    setFieldValues(initialFieldState);\n  }, []); // if customerEdit object exists, the initial field-values are set directly from that object.\n\n  useEffect(() => {\n    customerEdit && setFieldValues(customerEdit);\n  }, []);\n\n  const handleChange = (name, value) => {\n    setFieldValues(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    switch (submit) {\n      case \"Register\":\n        userKit.register(fieldValues);\n        break;\n\n      case \"Login\":\n        userKit.login(fieldValues).then(res => res.json()).then(data => {\n          if (data.token) {\n            userKit.setSessionToken(data.token);\n            setTriggerListUpdate(!triggerListUpdate);\n            history.push(\"/\");\n          }\n        });\n        break;\n\n      case \"Add customer\":\n        userKit.addCustomer(fieldValues).then(() => setTriggerListUpdate(!triggerListUpdate));\n        break;\n\n      case \"Edit customer\":\n        userKit.updateCustomer(customerEdit.id, fieldValues).then(() => setTriggerListUpdate(!triggerListUpdate)).then(history.push(\"/\"));\n        break;\n\n      default:\n        console.log(\"default\");\n    }\n\n    history.push(\"/\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, fieldValues && formKit[type].map(field => {\n    if (field.type === \"input\") {\n      return /*#__PURE__*/React.createElement(Input, {\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      });\n    }\n\n    if (field.type === \"select\") {\n      return /*#__PURE__*/React.createElement(SelectInput, {\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        options: field.options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      });\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, submit));\n};\n\nexport default TheForm;","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/skolan/inlaÌˆmining2/uppgift2/src/containers/TheForm.jsx"],"names":["React","useContext","useState","useEffect","useHistory","UserContext","Input","SelectInput","FormKit","UserKit","TheForm","type","customerEdit","submit","userKit","formKit","history","fieldValues","setFieldValues","triggerListUpdate","setTriggerListUpdate","form","initialFieldState","reduce","acc","cur","name","options","handleChange","value","prevState","handleSubmit","e","preventDefault","register","login","then","res","json","data","token","setSessionToken","push","addCustomer","updateCustomer","id","console","log","map","field"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { useEffect } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { UserContext } from \"../UserContext\"\nimport Input from \"../components/Input\"\nimport SelectInput from \"../components/SelectInput\"\nimport FormKit from \"../data/FormKit\"\nimport UserKit from \"../data/UserKit\"\n\n// when the form is rendered on the page, it is rendered\n//  with up to three props:\n// * type,   matches an array i FormKit.js, the form will\n//   loop over the array and print out\n//   the corresponding inputs.\n// * customerEdit, if customerEdit is sent with the props,\n//   the form renders the Inputs from formKit.customer\n//   and sets the values of the inputs  the values from the customerEdit object\n// * submit, when the form is submited, the switch\n//   in handleSubmit() checks the submit prop for the correct destination\nconst TheForm = ({ type, customerEdit, submit }) => {\n  const userKit = new UserKit()\n  const formKit = new FormKit()\n  const history = useHistory()\n  const [fieldValues, setFieldValues] = useState()\n  const { triggerListUpdate, setTriggerListUpdate } = useContext(UserContext)\n\n  //  to have controlled inputs, an initial value is set\n  //   by looping over the fields in formKit[type].\n  //  if a field has an option value, the value is set to option nr 1,\n  //  if it does not have an option value, the input will be\n  //  a regular input and it's initial value will be set to \"\"\n  useEffect(() => {\n    let form = formKit[type]\n    let initialFieldState = form.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\",\n      }\n    }, {})\n    setFieldValues(initialFieldState)\n  }, [])\n\n  // if customerEdit object exists, the initial field-values are set directly from that object.\n  useEffect(() => {\n    customerEdit && setFieldValues(customerEdit)\n  }, [])\n\n  const handleChange = (name, value) => {\n    setFieldValues((prevState) => {\n      return {\n        ...prevState,\n        [name]: value,\n      }\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    switch (submit) {\n      case \"Register\":\n        userKit.register(fieldValues)\n        break\n      case \"Login\":\n        userKit\n          .login(fieldValues)\n          .then((res) => res.json())\n          .then((data) => {\n            if (data.token) {\n              userKit.setSessionToken(data.token)\n              setTriggerListUpdate(!triggerListUpdate)\n              history.push(\"/\")\n            }\n          })\n        break\n      case \"Add customer\":\n        userKit\n          .addCustomer(fieldValues)\n          .then(() => setTriggerListUpdate(!triggerListUpdate))\n\n        break\n      case \"Edit customer\":\n        userKit\n          .updateCustomer(customerEdit.id, fieldValues)\n          .then(() => setTriggerListUpdate(!triggerListUpdate))\n          .then(history.push(\"/\"))\n\n        break\n      default:\n        console.log(\"default\")\n    }\n\n    history.push(\"/\")\n  }\n\n  return (\n    <form>\n      {fieldValues &&\n        formKit[type].map((field) => {\n          if (field.type === \"input\") {\n            return (\n              <Input\n                name={field.name}\n                label={field.name}\n                value={fieldValues[field.name]}\n                handleChange={handleChange}\n              ></Input>\n            )\n          }\n          if (field.type === \"select\") {\n            return (\n              <SelectInput\n                name={field.name}\n                label={field.name}\n                value={fieldValues[field.name]}\n                handleChange={handleChange}\n                options={field.options}\n              ></SelectInput>\n            )\n          }\n        })}\n      <button onClick={(e) => handleSubmit(e)}>{submit}</button>\n    </form>\n  )\n}\n\nexport default TheForm\n"]},"metadata":{},"sourceType":"module"}