{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/skolan/inla\\u0308mining2/uppgift2/src/containers/TheForm.jsx\";\nimport React, { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Input from \"../components/Input\";\nimport SelectInput from \"../components/SelectInput\";\nimport FormKit from \"../data/FormKit\";\nimport UserKit from \"../data/UserKit\";\n\nconst TheForm = ({\n  type,\n  customer\n}) => {\n  const userKit = new UserKit();\n  const formKit = new FormKit();\n  const history = useHistory();\n  const [fieldValues, setFieldValues] = useState();\n  const {\n    setCurrentUser\n  } = useContext(UserContext);\n  const {\n    setCustomerList\n  } = useContext(UserContext); // depending on what type of form is requested\n  // initialFieldValues is set by the values collected from FormKit.js\n\n  useEffect(() => {\n    let form = formKit[type];\n    let initialFieldState = form.reduce((acc, cur) => {\n      return { ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\"\n      };\n    }, {});\n    setFieldValues(initialFieldState);\n  }, []);\n  console.log(fieldValues);\n  useEffect(() => {\n    customer && setFieldValues(customer);\n  }, []);\n\n  const handleChange = (name, value) => {\n    setFieldValues(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    type === \"register\" && userKit.register(fieldValues);\n    type === \"login\" && userKit.login(fieldValues).then(res => res.json()).then(data => {\n      if (data.token) {\n        setCurrentUser(true);\n        userKit.setSessionToken(data.token);\n        history.push(\"/\");\n      }\n    });\n\n    if (type === \"addCustomer\" && !customer) {\n      userKit.addCustomer(fieldValues);\n    }\n\n    customer && userKit.updateCustomer(customer.id, fieldValues);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, fieldValues && formKit[type].map(field => {\n    if (field.type === \"input\") {\n      return /*#__PURE__*/React.createElement(Input, {\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }\n      });\n    }\n\n    if (field.type === \"select\") {\n      return /*#__PURE__*/React.createElement(SelectInput, {\n        name: field.name,\n        label: field.name,\n        value: fieldValues[field.name],\n        handleChange: handleChange,\n        options: field.options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }\n      });\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, customer ? \"update\" : type));\n};\n\nexport default TheForm;","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/skolan/inlaÌˆmining2/uppgift2/src/containers/TheForm.jsx"],"names":["React","useContext","useState","useEffect","useHistory","UserContext","Input","SelectInput","FormKit","UserKit","TheForm","type","customer","userKit","formKit","history","fieldValues","setFieldValues","setCurrentUser","setCustomerList","form","initialFieldState","reduce","acc","cur","name","options","console","log","handleChange","value","prevState","handleSubmit","e","preventDefault","register","login","then","res","json","data","token","setSessionToken","push","addCustomer","updateCustomer","id","map","field"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { useEffect } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { UserContext } from \"../UserContext\"\nimport Input from \"../components/Input\"\nimport SelectInput from \"../components/SelectInput\"\nimport FormKit from \"../data/FormKit\"\nimport UserKit from \"../data/UserKit\"\n\nconst TheForm = ({ type, customer }) => {\n  const userKit = new UserKit()\n  const formKit = new FormKit()\n  const history = useHistory()\n  const [fieldValues, setFieldValues] = useState()\n\n  const { setCurrentUser } = useContext(UserContext)\n  const { setCustomerList } = useContext(UserContext)\n\n  // depending on what type of form is requested\n  // initialFieldValues is set by the values collected from FormKit.js\n  useEffect(() => {\n    let form = formKit[type]\n    let initialFieldState = form.reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur.name]: cur.options ? cur.options[0] : \"\",\n      }\n    }, {})\n    setFieldValues(initialFieldState)\n  }, [])\n  console.log(fieldValues)\n\n  useEffect(() => {\n    customer && setFieldValues(customer)\n  }, [])\n\n  const handleChange = (name, value) => {\n    setFieldValues((prevState) => {\n      return {\n        ...prevState,\n        [name]: value,\n      }\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    type === \"register\" && userKit.register(fieldValues)\n    type === \"login\" &&\n      userKit\n        .login(fieldValues)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.token) {\n            setCurrentUser(true)\n            userKit.setSessionToken(data.token)\n            history.push(\"/\")\n          }\n        })\n    if (type === \"addCustomer\" && !customer) {\n      userKit.addCustomer(fieldValues)\n    }\n\n    customer && userKit.updateCustomer(customer.id, fieldValues)\n  }\n\n  return (\n    <form>\n      {fieldValues &&\n        formKit[type].map((field) => {\n          if (field.type === \"input\") {\n            return (\n              <Input\n                name={field.name}\n                label={field.name}\n                value={fieldValues[field.name]}\n                handleChange={handleChange}\n              ></Input>\n            )\n          }\n          if (field.type === \"select\") {\n            return (\n              <SelectInput\n                name={field.name}\n                label={field.name}\n                value={fieldValues[field.name]}\n                handleChange={handleChange}\n                options={field.options}\n              ></SelectInput>\n            )\n          }\n        })}\n      <button onClick={(e) => handleSubmit(e)}>\n        {customer ? \"update\" : type}\n      </button>\n    </form>\n  )\n}\n\nexport default TheForm\n"]},"metadata":{},"sourceType":"module"}