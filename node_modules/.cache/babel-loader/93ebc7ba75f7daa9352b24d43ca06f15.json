{"ast":null,"code":"export default class {\n  constructor() {\n    this.login = [this.fields.email, this.fields.password];\n    this.register = [{\n      name: \"firstName\",\n      input: \"input\",\n      required: true\n    }, {\n      name: \"lastName\",\n      input: \"input\",\n      required: true\n    }, this.email, this.password, {\n      name: \"organisationName\",\n      input: \"input\",\n      required: true\n    }, {\n      name: \"organisationKind\",\n      input: \"select\",\n      required: true,\n      options: [1, 2, 3]\n    }];\n    this.customer = [{\n      name: \"name\",\n      label: \"name\",\n      input: \"input\",\n      required: true\n    }, {\n      name: \"organisationNr\",\n      label: \"Organisation number\",\n      input: \"input\"\n    }, {\n      name: \"vatNr\",\n      label: \"Vat number\",\n      input: \"input\",\n      validateVat: true\n    }, {\n      name: \"reference\",\n      label: \"Reference\",\n      input: \"input\"\n    }, {\n      name: \"paymentTerm\",\n      label: \"Payment term\",\n      input: \"input\",\n      required: true,\n      type: \"number\"\n    }, {\n      name: \"website\",\n      label: \"Website\",\n      input: \"input\"\n    }, this.email, {\n      name: \"phoneNumber\",\n      label: \"Phone number\",\n      input: \"input\"\n    }];\n    this.fields = {\n      email: {\n        name: \"email\",\n        input: \"input\",\n        required: true,\n        validateEmail: true,\n        type: \"input\",\n        label: \"email\"\n      },\n      password: {\n        name: \"password\",\n        input: \"input\",\n        required: true,\n        type: \"password\"\n      }\n    };\n\n    this.validate = (type, fieldValues, setErrorMessage) => {\n      let canSubmit = true;\n      const form = this[type];\n      const errorMessages = [];\n      form.forEach(field => {\n        if (field.validateEmail) {\n          const re = /\\S+@\\S+\\.\\S+/;\n\n          if (!re.test(fieldValues[field.name])) {\n            errorMessages.push({\n              [field.name]: \"please enter a valid email\"\n            });\n          }\n        }\n\n        if (field.validateVat) {\n          const re = /^(SE)(\\d{10}01$)/i;\n          console.log(fieldValues[field.name]);\n\n          if (!re.test(fieldValues[field.name])) {\n            errorMessages.push({\n              [field.name]: \"please enter a valid vat\"\n            });\n          }\n        }\n\n        if (field.required && fieldValues[field.name].length === 0) {\n          errorMessages.push({\n            [field.name]: \"this field is required\"\n          });\n        }\n      });\n\n      if (errorMessages.length === 0) {\n        return canSubmit;\n      } else {\n        console.log(errorMessages);\n        setErrorMessage(...errorMessages);\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/skolan/inlaÌˆmining2/uppgift2/src/data/FormKit.js"],"names":["login","fields","email","password","register","name","input","required","options","customer","label","validateVat","type","validateEmail","validate","fieldValues","setErrorMessage","canSubmit","form","errorMessages","forEach","field","re","test","push","console","log","length"],"mappings":"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","sourcesContent":["export default class {\n  login = [this.fields.email, this.fields.password]\n\n  register = [\n    { name: \"firstName\", input: \"input\", required: true },\n    { name: \"lastName\", input: \"input\", required: true },\n    this.email,\n    this.password,\n    { name: \"organisationName\", input: \"input\", required: true },\n    {\n      name: \"organisationKind\",\n      input: \"select\",\n      required: true,\n      options: [1, 2, 3],\n    },\n  ]\n\n  customer = [\n    { name: \"name\", label: \"name\", input: \"input\", required: true },\n    { name: \"organisationNr\", label: \"Organisation number\", input: \"input\" },\n    { name: \"vatNr\", label: \"Vat number\", input: \"input\", validateVat: true },\n    { name: \"reference\", label: \"Reference\", input: \"input\" },\n    {\n      name: \"paymentTerm\",\n      label: \"Payment term\",\n      input: \"input\",\n      required: true,\n      type: \"number\",\n    },\n    { name: \"website\", label: \"Website\", input: \"input\" },\n    this.email,\n    { name: \"phoneNumber\", label: \"Phone number\", input: \"input\" },\n  ]\n  fields = {\n    email: {\n      name: \"email\",\n      input: \"input\",\n      required: true,\n      validateEmail: true,\n      type: \"input\",\n      label: \"email\",\n    },\n    password: {\n      name: \"password\",\n      input: \"input\",\n      required: true,\n      type: \"password\",\n    },\n  }\n\n  validate = (type, fieldValues, setErrorMessage) => {\n    let canSubmit = true\n    const form = this[type]\n    const errorMessages = []\n\n    form.forEach((field) => {\n      if (field.validateEmail) {\n        const re = /\\S+@\\S+\\.\\S+/\n        if (!re.test(fieldValues[field.name])) {\n          errorMessages.push({ [field.name]: \"please enter a valid email\" })\n        }\n      }\n      if (field.validateVat) {\n        const re = /^(SE)(\\d{10}01$)/i\n        console.log(fieldValues[field.name])\n        if (!re.test(fieldValues[field.name])) {\n          errorMessages.push({ [field.name]: \"please enter a valid vat\" })\n        }\n      }\n      if (field.required && fieldValues[field.name].length === 0) {\n        errorMessages.push({ [field.name]: \"this field is required\" })\n      }\n    })\n\n    if (errorMessages.length === 0) {\n      return canSubmit\n    } else {\n      console.log(errorMessages)\n\n      setErrorMessage(...errorMessages)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}