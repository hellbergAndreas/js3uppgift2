{"ast":null,"code":"export default class {\n  constructor() {\n    this.fields = {\n      email: {\n        name: \"email\",\n        input: \"input\",\n        validateEmail: true,\n        type: \"input\",\n        label: \"email\"\n      },\n      password: {\n        name: \"password\",\n        input: \"input\",\n        required: true,\n        type: \"password\"\n      }\n    };\n    this.login = [this.fields.email, this.fields.password];\n    this.register = [{\n      name: \"firstName\",\n      input: \"input\",\n      required: true\n    }, {\n      name: \"lastName\",\n      input: \"input\",\n      required: true\n    }, this.fields.email, this.fields.password, {\n      name: \"organisationName\",\n      input: \"input\",\n      required: true\n    }, {\n      name: \"organisationKind\",\n      input: \"select\",\n      required: true,\n      options: [1, 2, 3]\n    }];\n    this.customer = [{\n      name: \"name\",\n      label: \"name\",\n      input: \"input\",\n      required: true\n    }, {\n      name: \"organisationNr\",\n      label: \"Organisation number\",\n      input: \"input\"\n    }, {\n      name: \"vatNr\",\n      label: \"Vat number\",\n      input: \"input\",\n      validateVat: true\n    }, {\n      name: \"reference\",\n      label: \"Reference\",\n      input: \"input\"\n    }, {\n      name: \"paymentTerm\",\n      label: \"Payment term\",\n      input: \"input\",\n      required: true,\n      type: \"number\"\n    }, {\n      name: \"website\",\n      label: \"Website\",\n      input: \"input\"\n    }, this.fields.email, {\n      name: \"phoneNumber\",\n      label: \"Phone number\",\n      input: \"input\"\n    }];\n\n    this.validate = (type, fieldValues, setErrorMessage) => {\n      let canSubmit = true;\n      const form = this[type];\n      const errorMessages = [];\n      form.forEach(field => {\n        if (field.validateEmail) {\n          const re = /\\S+@\\S+\\.\\S+/;\n\n          if (!re.test(fieldValues[field.name])) {\n            errorMessages.push({\n              [field.name]: \"please enter a valid email\"\n            });\n          }\n        }\n\n        if (field.validateVat) {\n          const re = /^(SE)(\\d{10}01$)/i;\n          console.log(fieldValues[field.name]);\n\n          if (!re.test(fieldValues[field.name])) {\n            errorMessages.push({\n              [field.name]: \"please enter a valid vat\"\n            });\n          }\n        }\n\n        if (field.required && fieldValues[field.name].length === 0) {\n          errorMessages.push({\n            [field.name]: \"this field is required\"\n          });\n        }\n      });\n\n      if (errorMessages.length === 0) {\n        return canSubmit;\n      } else {\n        errorMessages.forEach(error => {\n          setErrorMessage(prevState => {});\n        });\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/skolan/inlaÌˆmining2/uppgift2/src/data/FormKit.js"],"names":["fields","email","name","input","validateEmail","type","label","password","required","login","register","options","customer","validateVat","validate","fieldValues","setErrorMessage","canSubmit","form","errorMessages","forEach","field","re","test","push","console","log","length","error","prevState"],"mappings":"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","sourcesContent":["export default class {\n  fields = {\n    email: {\n      name: \"email\",\n      input: \"input\",\n\n      validateEmail: true,\n      type: \"input\",\n      label: \"email\",\n    },\n    password: {\n      name: \"password\",\n      input: \"input\",\n      required: true,\n      type: \"password\",\n    },\n  }\n\n  login = [this.fields.email, this.fields.password]\n\n  register = [\n    { name: \"firstName\", input: \"input\", required: true },\n    { name: \"lastName\", input: \"input\", required: true },\n    this.fields.email,\n    this.fields.password,\n    { name: \"organisationName\", input: \"input\", required: true },\n    {\n      name: \"organisationKind\",\n      input: \"select\",\n      required: true,\n      options: [1, 2, 3],\n    },\n  ]\n\n  customer = [\n    { name: \"name\", label: \"name\", input: \"input\", required: true },\n    { name: \"organisationNr\", label: \"Organisation number\", input: \"input\" },\n    { name: \"vatNr\", label: \"Vat number\", input: \"input\", validateVat: true },\n    { name: \"reference\", label: \"Reference\", input: \"input\" },\n    {\n      name: \"paymentTerm\",\n      label: \"Payment term\",\n      input: \"input\",\n      required: true,\n      type: \"number\",\n    },\n    { name: \"website\", label: \"Website\", input: \"input\" },\n    this.fields.email,\n    { name: \"phoneNumber\", label: \"Phone number\", input: \"input\" },\n  ]\n\n  validate = (type, fieldValues, setErrorMessage) => {\n    let canSubmit = true\n    const form = this[type]\n    const errorMessages = []\n\n    form.forEach((field) => {\n      if (field.validateEmail) {\n        const re = /\\S+@\\S+\\.\\S+/\n        if (!re.test(fieldValues[field.name])) {\n          errorMessages.push({ [field.name]: \"please enter a valid email\" })\n        }\n      }\n      if (field.validateVat) {\n        const re = /^(SE)(\\d{10}01$)/i\n        console.log(fieldValues[field.name])\n        if (!re.test(fieldValues[field.name])) {\n          errorMessages.push({ [field.name]: \"please enter a valid vat\" })\n        }\n      }\n      if (field.required && fieldValues[field.name].length === 0) {\n        errorMessages.push({ [field.name]: \"this field is required\" })\n      }\n    })\n\n    if (errorMessages.length === 0) {\n      return canSubmit\n    } else {\n      errorMessages.forEach((error) => {\n        setErrorMessage((prevState) => {})\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}